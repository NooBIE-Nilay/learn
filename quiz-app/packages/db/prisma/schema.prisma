// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())     // maps to Clerk user ID
  email         String?   @unique
  phone         String?
  name          String?
  quizzes       Quiz[]   @relation("UserQuizzes")
  participants  Participant[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


model Quiz {
  id                              String                            @id @default(uuid())
  title                           String
  description              String
  authorId                   String
  author                      User                            @relation("UserQuizzes", fields: [authorId], references: [id])
  maxScore                 Int                                @default(0)
  questions                 Question[]
  participants              Participant[]
  createdAt                  DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
}

model Question {
  id                    String               @id @default(uuid())
  quizId             String
  type             QuestionType
  mandatory    Boolean            @default(false)
  question        String
  options          String[]
  answer           String?
  score              Int              
  quiz                Quiz                  @relation(fields: [quizId], references: [id])
  answers Answer[]
}

model Participant {
  id                      String                @id @default(uuid())
  userId              String
  user                 User                   @relation(fields: [userId], references: [id])
  score               Int                       @default(0)
  quizId              String
  quiz                 Quiz                    @relation(fields: [quizId], references: [id])
  answers Answer[]
  createdAt       DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Answer {
  id             String       @id @default(uuid())
  participantId  String
  participant    Participant  @relation(fields: [participantId], references: [id])
  questionId     String
  question       Question     @relation(fields: [questionId], references: [id])
  // Store the answer in a flexible shape, e.g.
  // MCQ: { selected: "A" }
  // MCQ_MULTIPLE: { selected: ["A","C"] }
  // SHORT/LONG: { text: "..." }
  value          Json

  // Optional scoring fields if you want to compute/grade
  isCorrect      Boolean?
  awardedScore   Int          @default(0)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([participantId, questionId]) // one answer per question per participant
}

enum QuestionType{
  MCQ
  MCQ_MULTIPLE
  SHORT
  LONG
}